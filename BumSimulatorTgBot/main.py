import Config
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import MessageNotModified
from aiogram.types import *
import Services, asyncio

bot = Bot(token=Config.Token)
dp = Dispatcher(bot)

lol = lambda lst, sz: [lst[i:i+sz] for i in range(0, len(lst), sz)]




# Menu keyboards.py
inline_btn_profile = InlineKeyboardButton('–ì–µ—Ä–æ–πüë®‚Äçü¶∞', callback_data='btnM_Profile')
inline_btn_health = InlineKeyboardButton('–ó–¥–æ—Ä–æ–≤—å–µ‚ù§Ô∏è', callback_data='btnM_Health')
inline_btn_eat = InlineKeyboardButton('–ï–¥–∞üçÜ', callback_data='btnM_Eat')
inline_btn_happy = InlineKeyboardButton('–°—á–∞—Å—Ç—å–µüòÅ', callback_data='btnM_Happy')
inline_btn_earn_money = InlineKeyboardButton('–ó–∞—Ä–∞–±–æ—Ç–æ–∫üí∏', callback_data='btnM_EarnMoney')
menuKb = InlineKeyboardMarkup(row_width=3).add(inline_btn_profile)
menuKb.row(inline_btn_health, inline_btn_eat, inline_btn_happy, )
menuKb.row(inline_btn_earn_money)



inline_btn_BumWork = InlineKeyboardButton('–ë—Ä–æ–¥—è–∂–Ω–∏—á–µ—Å—Ç–≤–æ', callback_data='btnM_BumWork')
inline_btn_NormalWork = InlineKeyboardButton('–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', callback_data='btnM_NormalWork')




@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    Msg = await  bot.send_message(message.chat.id,"–ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...")
    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)

    Services.RegisterNewUser(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)

    await Msg.edit_text('–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')

    await asyncio.sleep(3)
    JsonR = Services.GetUserPersonage(message.chat.id)
    await bot.send_message(message.chat.id, Services.FormatUserToBeautifullMsg(JsonR), reply_markup=menuKb)


async def NotRegistered(userId):
    await bot.send_message(userId, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏))")


async def –íeath(userId):
    await bot.send_message(userId, "–í–∞—à–∞ –¥—É—à–∞ –Ω–∞–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∏–¥–∞–µ—Ç —ç—Ç–æ –±—Ä–µ–Ω–Ω–æ–µ —Ç–µ–ª–æ –±–æ–º–∂–∞, –æ–¥–Ω–∞–∫–æ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ–∑—Ä–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∂–µ—Å—Ç–æ–∫–æ–º –º–∏—Ä–µ, –≤ –Ω–æ–≤–æ–π –æ–±–æ–ª–æ—á–∫–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    return 0


@dp.callback_query_handler(regexp='^btnM_')
async def process_callback_button1(callback_query: types.CallbackQuery):
    if Services.GetUserPersonage(callback_query.from_user.id) == "NotRegistered":
        await NotRegistered(callback_query.from_user.id)
        return 0

    if callback_query.data == 'btnM_Profile':
        await callback_query.message.edit_text( Services.FormatUserProfileToBeautifullMsg(Services.GetUserPersonage(callback_query.from_user.id)))

        
    elif callback_query.data == 'btnM_Eat':
        resultJson = CreateEatMurkup()
        await callback_query.message.edit_text(Services.FormatUserToBeautifullMsg(Services.GetUserPersonage(callback_query.from_user.id)),
         reply_markup=resultJson)
        
    
    elif callback_query.data == 'btnM_Happy':
        await callback_query.message.edit_text(Services.FormatUserToBeautifullMsg(Services.GetUserPersonage(callback_query.from_user.id)),
         reply_markup=CreateHappyMurkup())

    elif callback_query.data == 'btnM_Health':
        resultJson = CreateHealthMurkup()
        await callback_query.message.edit_text(Services.FormatUserToBeautifullMsg(Services.GetUserPersonage(callback_query.from_user.id)),
         reply_markup=resultJson)


@dp.callback_query_handler(regexp='^Menu')
async def process_callback_button1(callback_query: types.CallbackQuery):
    if Services.GetUserPersonage(callback_query.from_user.id) == "NotRegistered":
        await NotRegistered(callback_query.from_user.id)
        return 0

    await callback_query.message.edit_text(Services.FormatUserToBeautifullMsg(Services.GetUserPersonage(callback_query.from_user.id)),
         reply_markup=menuKb)



@dp.callback_query_handler(regexp='^eat_')
async def process_callback_button1(callback_query: types.CallbackQuery):
    if Services.GetUserPersonage(callback_query.from_user.id) == "NotRegistered":
        await NotRegistered(callback_query.from_user.id)
        return 0

    executeResult = await Services.ExecuteEatActivity(eatId=callback_query.data.replace('eat_',''), userId=callback_query.from_user.id)
    if executeResult == 'NotHaveMoney':
        await bot.answer_callback_query(callback_query.id, text="–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —ç—Ç–æ))", show_alert=True)
    elif executeResult == 'Eat_die':
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –ø–æ–º–µ—Ä —Å –≥–æ–ª–æ–¥—É)))", show_alert=True)
        await –íeath(callback_query.from_user.id)
    elif executeResult == 'Health_die':
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –ø–æ–º–µ—Ä)))", show_alert=True)
        await –íeath(callback_query.from_user.id)
    elif executeResult == 'Happy_die':
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –ø–æ–≤–µ—Å–∏–ª—Å—è))))", show_alert=True)
        await –íeath(callback_query.from_user.id)
    else:
        await callback_query.message.edit_text(Services.FormatUserToBeautifullMsg(Services.GetUserPersonage(callback_query.from_user.id)),
            reply_markup=CreateEatMurkup())

@dp.callback_query_handler(regexp='^happy_')
async def process_callback_button1(callback_query: types.CallbackQuery):
    if Services.GetUserPersonage(callback_query.from_user.id) == "NotRegistered":
        await NotRegistered(callback_query.from_user.id)
        return 0

    executeResult = await Services.ExecuteHappyActivity(happyId=callback_query.data.replace('happy_',''), userId=callback_query.from_user.id)
    if executeResult == 'NotHaveMoney':
        await bot.answer_callback_query(callback_query.id, text="–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —ç—Ç–æ))", show_alert=True)
    elif executeResult == 'Eat_die':
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –ø–æ–º–µ—Ä —Å –≥–æ–ª–æ–¥—É)))", show_alert=True)
        await –íeath(callback_query.from_user.id)
    elif executeResult == 'Health_die':
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –ø–æ–º–µ—Ä)))", show_alert=True)
        await –íeath(callback_query.from_user.id)
    elif executeResult == 'Happy_die':
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –ø–æ–≤–µ—Å–∏–ª—Å—è))))", show_alert=True)
        await –íeath(callback_query.from_user.id)
    else:        
        await callback_query.message.edit_text(Services.FormatUserToBeautifullMsg(Services.GetUserPersonage(callback_query.from_user.id)),
            reply_markup=CreateHappyMurkup())


@dp.callback_query_handler(regexp='^health_')
async def process_callback_button1(callback_query: types.CallbackQuery):
    if Services.GetUserPersonage(callback_query.from_user.id) == "NotRegistered":
        await NotRegistered(callback_query.from_user.id)
        return 0

    executeResult = await Services.ExecuteHealthActivity(healthId=callback_query.data.replace('health_',''), userId=callback_query.from_user.id)

    if executeResult == 'NotHaveMoney':
        await bot.answer_callback_query(callback_query.id, text="–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —ç—Ç–æ)", show_alert=True)
    elif executeResult == 'Eat_die':
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –ø–æ–º–µ—Ä —Å –≥–æ–ª–æ–¥—É)))", show_alert=True)
        await –íeath(callback_query.from_user.id)
    elif executeResult == 'Health_die':
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –ø–æ–º–µ—Ä)))", show_alert=True)
        await –íeath(callback_query.from_user.id)
    elif executeResult == 'Happy_die':
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –ø–æ–≤–µ—Å–∏–ª—Å—è))))", show_alert=True)
        await –íeath(callback_query.from_user.id)
    else:        
        await callback_query.message.edit_text(Services.FormatUserToBeautifullMsg(Services.GetUserPersonage(callback_query.from_user.id)),
            reply_markup=CreateHealthMurkup())




def CreateEatMurkup():
    EatJson = Services.GetEat()
    resultJson = {"inline_keyboard": []}
    
    eatbtnsList=[]
    
    for eat_activity in EatJson['eat']:
        eatbtnsList.append({"text":  f"{eat_activity['name']}\n{str(eat_activity['price'])}‚ÇΩ",
        "callback_data": f"{'eat_'+str(eat_activity['id'])}"})


    resultJson['inline_keyboard'] = (lol(eatbtnsList, 2))
    resultJson['inline_keyboard'].append([{"text":"–ù–∞–∑–∞–¥","callback_data":"Menu"}])
    return resultJson

def CreateHappyMurkup():
    HappyJson = Services.GetHappy() 
    resultJson = {"inline_keyboard": []}

    happybtnsList=[]
    for eat_activity in HappyJson['happy']:
        happybtnsList.append({"text":  f"{eat_activity['name']}\n{str(eat_activity['price'])}‚ÇΩ",
        "callback_data": f"{'happy_'+str(eat_activity['id'])}"})

    resultJson['inline_keyboard']= (lol(happybtnsList, 2))
    resultJson['inline_keyboard'].append([{"text":"–ù–∞–∑–∞–¥","callback_data":"Menu"}])
    return resultJson

def CreateHealthMurkup():
    HappyJson = Services.GetHealth() 
    resultJson = {"inline_keyboard": []}

    healthbtnsList=[]
    for eat_activity in HappyJson['health']:
        healthbtnsList.append({"text":  f"{eat_activity['name']}\n{str(eat_activity['price'])}‚ÇΩ",
        "callback_data": f"{'health_'+str(eat_activity['id'])}"})

    resultJson['inline_keyboard'] = (lol(healthbtnsList, 2))
    resultJson['inline_keyboard'].append([{"text":"–ù–∞–∑–∞–¥","callback_data":"Menu"}])
    return resultJson


@dp.message_handler()
async def echo_message(msg: types.Message):
    if Services.GetUserPersonage(msg.from_user.id) == "NotRegistered":
        await NotRegistered(msg.from_user.id)
        return 0

    await bot.send_message(msg.chat.id, Services.FormatUserToBeautifullMsg(Services.GetUserPersonage(msg.chat.id)), reply_markup=menuKb)


if __name__ == '__main__':
    executor.start_polling(dp)